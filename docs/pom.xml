<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>io.quarkiverse.antora</groupId>
        <artifactId>quarkus-antora-parent</artifactId>
        <version>2.2.1-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>quarkus-antora-docs</artifactId>
    <name>Quarkus Antora - Documentation</name>

    <dependencies>
        <dependency>
            <groupId>io.quarkiverse.antora</groupId>
            <artifactId>quarkus-antora-quarkiverse</artifactId>
        </dependency>

        <!-- tag::basic-test[] -->
        <dependency>
            <groupId>io.quarkiverse.antora</groupId>
            <artifactId>quarkus-antora</artifactId>
        </dependency>

        <!-- Test dependencies -->
        <dependency>
            <groupId>io.quarkus</groupId>
            <artifactId>quarkus-junit5</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- end::basic-test[] -->
        <!-- tag::dead-links[] -->
        <dependency>
            <groupId>io.quarkiverse.antora</groupId>
            <artifactId>quarkus-antorassured</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- end::dead-links[] -->

        <!-- Make sure the doc is built after the other artifacts -->
        <dependency>
            <groupId>io.quarkiverse.antora</groupId>
            <artifactId>quarkus-antora-deployment</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>io.quarkiverse.antora</groupId>
            <artifactId>quarkus-antora-quarkiverse-deployment</artifactId>
            <version>${project.version}</version>
            <type>pom</type>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>generate-code</goal>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>it.ozimov</groupId>
                <artifactId>yaml-properties-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${project.basedir}/../.github/project.yml</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.basedir}/modules/ROOT/pages/includes/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>
                                        ${project.basedir}/templates/includes</directory>
                                    <include>attributes.adoc</include>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-examples</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/modules/ROOT/examples/testing</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/src/test/java/io/quarkiverse/antora/test</directory>
                                    <include>AntoraSiteTest.java</include>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>copy-images</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>
                                ${project.build.directory}/generated-docs/_images/</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>
                                        ${project.basedir}/modules/ROOT/assets/images/</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-pom-xml-to-docs</id>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <phase>compile</phase><!-- same as the maven-resources-plugin above -->
                        <configuration>
                            <!-- Copy pom.xml changing the parent version so that the destination -->
                            <!-- file does not change after every release -->
                            <source>
                                import java.nio.file.Files
                                import java.nio.file.Path
                                def srcPath = project.basedir.toPath().resolve('pom.xml')
                                def newContent = srcPath.getText('UTF-8')
                                newContent = newContent.replace('&lt;version&gt;${project.version}&lt;/version&gt;', '&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;')
                                def destPath = project.basedir.toPath().resolve('modules/ROOT/examples/testing/pom.xml')
                                if (!Files.exists(destPath) || !newContent.equals(destPath.getText('UTF-8'))) {
                                    destPath.setText(newContent.toString(), 'UTF-8')
                                    println('Updated ' + destPath.toString())
                                } else {
                                    println(destPath.toString() + ' is up to date')
                                }
                            </source>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.quarkus</groupId>
                <artifactId>quarkus-config-doc-maven-plugin</artifactId>
                <version>${quarkus.version}</version>
                <executions>
                    <execution>
                        <id>generate-config-doc</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>generate-asciidoc</goal>
                        </goals>
                        <configuration>
                            <skip>${skipDocs}</skip>
                            <enableEnumTooltips>true</enableEnumTooltips>
                            <targetDirectory>${project.basedir}/modules/ROOT/pages/includes</targetDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
